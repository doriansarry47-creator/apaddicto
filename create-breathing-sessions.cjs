const { neon } = require('@neondatabase/serverless');
require('dotenv').config();

const sql = neon(process.env.DATABASE_URL);

async function createBreathingSessions() {
  console.log('üßò Cr√©ation des s√©ances de respiration...\n');

  try {
    // R√©cup√©rer l'admin (cr√©ateur)
    const adminResult = await sql`
      SELECT * FROM users WHERE role = 'admin' LIMIT 1
    `;

    if (adminResult.length === 0) {
      console.error('‚ùå Aucun administrateur trouv√©. Veuillez cr√©er un compte admin d\'abord.');
      return;
    }

    const adminUser = adminResult[0];
    console.log(`‚úÖ Admin trouv√©: ${adminUser.email}\n`);

    // 1. Coh√©rence Cardiaque
    console.log('üìò Cr√©ation : Coh√©rence Cardiaque');
    const heartCoherence = await sql`
      INSERT INTO custom_sessions (
        creator_id, title, description, category, protocol, protocol_config,
        total_duration, difficulty, status, is_template, is_public, tags, is_active
      ) VALUES (
        ${adminUser.id},
        'üíô Coh√©rence Cardiaque',
        'Technique de respiration rythm√©e pour r√©guler le syst√®me nerveux autonome et diminuer le stress. 6 cycles de respiration par minute (inspiration 5s / expiration 5s).',
        'breathing',
        'standard',
        ${JSON.stringify({
          type: 'breathing',
          pattern: 'coherence',
          inhaleTime: 5,
          exhaleTime: 5,
          totalDuration: 300
        })}::jsonb,
        5,
        'beginner',
        'published',
        true,
        true,
        ${JSON.stringify(['respiration', 'stress', 'relaxation', 'autonomie'])}::jsonb,
        true
      ) RETURNING *
    `;

    console.log(`‚úÖ S√©ance cr√©√©e: ${heartCoherence[0].title} (ID: ${heartCoherence[0].id})\n`);

    // 2. Respiration Triangulaire
    console.log('üìó Cr√©ation : Respiration Triangulaire');
    const triangleBreathing = await sql`
      INSERT INTO custom_sessions (
        creator_id, title, description, category, protocol, protocol_config,
        total_duration, difficulty, status, is_template, is_public, tags, is_active
      ) VALUES (
        ${adminUser.id},
        'üíö Respiration Triangulaire',
        'Technique de respiration apaisante bas√©e sur trois phases √©quilibr√©es : inspiration ‚Äì r√©tention ‚Äì expiration. Cycle standard : 4s / 4s / 4s.',
        'breathing',
        'standard',
        ${JSON.stringify({
          type: 'breathing',
          pattern: 'triangle',
          inhaleTime: 4,
          holdTime: 4,
          exhaleTime: 4,
          totalDuration: 240
        })}::jsonb,
        4,
        'beginner',
        'published',
        true,
        true,
        ${JSON.stringify(['respiration', 'calme', '√©quilibre', 'concentration'])}::jsonb,
        true
      ) RETURNING *
    `;

    console.log(`‚úÖ S√©ance cr√©√©e: ${triangleBreathing[0].title} (ID: ${triangleBreathing[0].id})\n`);

    // 3. Respiration Carr√©e (Box Breathing)
    console.log('üìô Cr√©ation : Respiration Carr√©e (Box Breathing)');
    const squareBreathing = await sql`
      INSERT INTO custom_sessions (
        creator_id, title, description, category, protocol, protocol_config,
        total_duration, difficulty, status, is_template, is_public, tags, is_active
      ) VALUES (
        ${adminUser.id},
        'üíú Respiration Carr√©e (Box Breathing)',
        'Respiration en quatre temps utilis√©e pour la relaxation et la concentration (technique de la Navy SEAL). 4 phases √©gales : Inspiration ‚Üí R√©tention ‚Üí Expiration ‚Üí R√©tention.',
        'breathing',
        'standard',
        ${JSON.stringify({
          type: 'breathing',
          pattern: 'square',
          inhaleTime: 4,
          holdAfterInhaleTime: 4,
          exhaleTime: 4,
          holdAfterExhaleTime: 4,
          totalDuration: 256
        })}::jsonb,
        4,
        'intermediate',
        'published',
        true,
        true,
        ${JSON.stringify(['respiration', 'concentration', 'navy seal', 'performance'])}::jsonb,
        true
      ) RETURNING *
    `;

    console.log(`‚úÖ S√©ance cr√©√©e: ${squareBreathing[0].title} (ID: ${squareBreathing[0].id})\n`);

    console.log('üéâ Toutes les s√©ances de respiration ont √©t√© cr√©√©es avec succ√®s!\n');
    console.log('üìä R√©sum√©:');
    console.log(`  - Coh√©rence Cardiaque: ${heartCoherence[0].id}`);
    console.log(`  - Respiration Triangulaire: ${triangleBreathing[0].id}`);
    console.log(`  - Respiration Carr√©e: ${squareBreathing[0].id}`);
    console.log('\n‚ú® Les patients peuvent maintenant acc√©der √† ces s√©ances dans leur biblioth√®que!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des s√©ances:', error);
    throw error;
  }
}

// Ex√©cution
createBreathingSessions()
  .then(() => {
    console.log('\n‚úÖ Script termin√© avec succ√®s');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Le script a √©chou√©:', error);
    process.exit(1);
  });
