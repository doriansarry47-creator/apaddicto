#!/usr/bin/env node

/**
 * Script de d√©ploiement automatis√© avec corrections Vercel
 * R√©sout le probl√®me d'authentification SSO et optimise la configuration
 */

import { execSync } from 'child_process';
import fs from 'fs';

console.log('üöÄ === D√âPLOIEMENT VERCEL AVEC CORRECTIONS SSO ===\n');

/**
 * V√©rification des pr√©requis
 */
function checkPrerequisites() {
  console.log('üîç V√©rification des pr√©requis...');
  
  const packageJsonExists = fs.existsSync('./package.json');
  const vercelJsonExists = fs.existsSync('./vercel.json');
  const apiDirExists = fs.existsSync('./api');
  
  if (!packageJsonExists || !vercelJsonExists || !apiDirExists) {
    throw new Error('‚ùå Fichiers requis manquants (package.json, vercel.json, api/)');
  }
  
  console.log('‚úÖ Pr√©requis valid√©s');
  return true;
}

/**
 * Validation de la configuration Vercel
 */
function validateVercelConfig() {
  console.log('üîß Validation de la configuration Vercel...');
  
  const vercelConfig = JSON.parse(fs.readFileSync('./vercel.json', 'utf8'));
  
  const checks = [
    {
      name: 'Version Vercel',
      check: () => vercelConfig.version === 2,
      message: 'Version Vercel doit √™tre 2'
    },
    {
      name: 'Routes API',
      check: () => vercelConfig.routes?.some(r => r.src?.includes('/api/')),
      message: 'Routes API doivent √™tre configur√©es'
    },
    {
      name: 'Headers CORS',
      check: () => vercelConfig.headers?.some(h => h.source?.includes('/api/')),
      message: 'Headers CORS doivent √™tre configur√©s'
    }
  ];
  
  checks.forEach(({ name, check, message }) => {
    if (check()) {
      console.log(`   ‚úÖ ${name}`);
    } else {
      console.log(`   ‚ùå ${name}: ${message}`);
    }
  });
  
  console.log('‚úÖ Configuration Vercel valid√©e');
}

/**
 * Build du projet
 */
function buildProject() {
  console.log('üèóÔ∏è Build du projet...');
  
  try {
    console.log('   üì¶ Build client...');
    execSync('npm run build:client', { stdio: 'inherit' });
    
    if (!fs.existsSync('./dist')) {
      throw new Error('Build client √©chou√© - dossier dist non trouv√©');
    }
    
    console.log('‚úÖ Build termin√© avec succ√®s');
  } catch (error) {
    throw new Error(`‚ùå Erreur de build: ${error.message}`);
  }
}

/**
 * Instructions post-d√©ploiement
 */
function showPostDeploymentInstructions() {
  console.log('\nüìã === INSTRUCTIONS POST-D√âPLOIEMENT ===\n');
  
  console.log('üîë **IMPORTANT**: D√©sactiver la protection SSO Vercel');
  console.log('1. Aller sur https://vercel.com/dashboard');
  console.log('2. S√©lectionner le projet Apaddicto');
  console.log('3. Settings > General');
  console.log('4. D√©sactiver "Vercel Authentication" ou "Password Protection"');
  console.log('5. Red√©ployer si n√©cessaire\n');
  
  console.log('üß™ **TESTS √Ä EFFECTUER APR√àS D√âPLOIEMENT**:');
  console.log('1. Acc√©der √† https://your-app.vercel.app/api/health');
  console.log('2. Tester la connexion admin:');
  console.log('   Email: doriansarry@yahoo.fr');
  console.log('   Password: admin123');
  console.log('3. V√©rifier que tous les endpoints r√©pondent (pas de 401)\n');
  
  console.log('üîß **EN CAS DE PROBL√àME**:');
  console.log('1. V√©rifier les logs Vercel dans le dashboard');
  console.log('2. Consulter le guide: VERCEL_SSO_FIX_GUIDE.md');
  console.log('3. Utiliser le script de diagnostic: node test-connection-diagnosis.js');
}

/**
 * Fonction principale
 */
async function main() {
  try {
    checkPrerequisites();
    validateVercelConfig();
    buildProject();
    
    console.log('\n‚úÖ === PR√âPARATION TERMIN√âE ===\n');
    console.log('üöÄ Projet pr√™t pour le d√©ploiement Vercel !');
    console.log('\n**Commandes de d√©ploiement**:');
    console.log('   Via CLI Vercel: vercel --prod');
    console.log('   Via Git: git push origin main (si connect√©)\n');
    
    showPostDeploymentInstructions();
    
  } catch (error) {
    console.error('\n‚ùå Erreur de d√©ploiement:', error.message);
    console.log('\nüîß **Actions recommand√©es**:');
    console.log('1. V√©rifier les messages d\'erreur ci-dessus');
    console.log('2. Corriger les probl√®mes identifi√©s');  
    console.log('3. Relancer ce script');
    process.exit(1);
  }
}

main();