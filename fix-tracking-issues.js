#!/usr/bin/env node
/**
 * Script pour corriger les probl√®mes de suivi et cr√©er des donn√©es par d√©faut
 */

import fetch from 'node-fetch';
import { config } from 'dotenv';

config();

const BASE_URL = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000';
const ADMIN_EMAIL = 'admin@apaddicto.com';
const ADMIN_PASSWORD = 'admin123';

let sessionCookie = null;

// Fonction pour effectuer des requ√™tes avec cookies
async function apiRequest(method, url, data = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...(sessionCookie && { 'Cookie': sessionCookie })
    }
  };
  
  if (data) {
    options.body = JSON.stringify(data);
  }
  
  const response = await fetch(`${BASE_URL}${url}`, options);
  
  // Capturer le cookie de session
  if (response.headers.get('set-cookie')) {
    sessionCookie = response.headers.get('set-cookie');
  }
  
  return response;
}

// Fonction pour s'authentifier en tant qu'admin
async function authenticateAdmin() {
  console.log('üîê Tentative de connexion admin...');
  
  try {
    const loginResponse = await apiRequest('POST', '/api/auth/login', {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    
    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.log('‚ùå √âchec de connexion admin, tentative de cr√©ation...');
      
      // Essayer de cr√©er un compte admin
      const registerResponse = await apiRequest('POST', '/api/auth/register', {
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD,
        firstName: 'Admin',
        lastName: 'System',
        role: 'admin'
      });
      
      if (!registerResponse.ok) {
        throw new Error(`Registration failed: ${registerResponse.status} ${await registerResponse.text()}`);
      }
      
      console.log('‚úÖ Compte admin cr√©√© avec succ√®s');
      const registerResult = await registerResponse.json();
      return registerResult.user;
    }
    
    const loginResult = await loginResponse.json();
    console.log('‚úÖ Connexion admin r√©ussie:', loginResult.user?.email);
    
    return loginResult.user;
  } catch (error) {
    console.error('‚ùå Erreur d\'authentification admin:', error.message);
    throw error;
  }
}

// Fonction pour cr√©er des exercices par d√©faut
async function createDefaultExercises() {
  console.log('\nüí™ Cr√©ation des exercices par d√©faut...');
  
  const defaultExercises = [
    {
      title: 'Respiration Profonde',
      category: 'relaxation',
      difficulty: 'beginner',
      duration: 5,
      description: 'Un exercice simple de respiration profonde pour calmer l\'esprit et r√©duire le stress.',
      instructions: '1. Asseyez-vous confortablement, dos droit.\n2. Inspirez lentement par le nez pendant 4 secondes.\n3. Retenez votre souffle pendant 4 secondes.\n4. Expirez lentement par la bouche pendant 6 secondes.\n5. R√©p√©tez pendant 5 minutes.',
      benefits: 'R√©duit le stress et l\'anxi√©t√©, am√©liore la concentration, aide √† g√©rer les cravings'
    },
    {
      title: 'M√©ditation de Pleine Conscience',
      category: 'mindfulness',
      difficulty: 'intermediate',
      duration: 10,
      description: 'Exercice de m√©ditation pour d√©velopper la conscience du moment pr√©sent.',
      instructions: '1. Trouvez un endroit calme et asseyez-vous confortablement.\n2. Fermez les yeux et concentrez-vous sur votre respiration.\n3. Observez vos pens√©es sans les juger.\n4. Ramenez doucement votre attention sur la respiration quand l\'esprit divague.\n5. Continuez pendant 10 minutes.',
      benefits: 'Am√©liore la conscience de soi, r√©duit les pens√©es automatiques n√©gatives, d√©veloppe la capacit√© √† observer les cravings sans y c√©der'
    },
    {
      title: 'Relaxation Musculaire Progressive',
      category: 'relaxation',
      difficulty: 'beginner',
      duration: 15,
      description: 'Technique de relaxation qui consiste √† tendre et rel√¢cher diff√©rents groupes musculaires.',
      instructions: '1. Allongez-vous confortablement.\n2. Commencez par les orteils : contractez pendant 5 secondes, puis rel√¢chez.\n3. Remontez progressivement : pieds, mollets, cuisses, abdomen, bras, √©paules, visage.\n4. Concentrez-vous sur la sensation de rel√¢chement apr√®s chaque contraction.\n5. Terminez par une relaxation totale de 2 minutes.',
      benefits: 'Diminue les tensions physiques, am√©liore la qualit√© du sommeil, aide √† g√©rer le stress et les cravings'
    },
    {
      title: 'Visualisation Positive',
      category: 'visualization',
      difficulty: 'intermediate',
      duration: 8,
      description: 'Exercice de visualisation pour renforcer la motivation et les pens√©es positives.',
      instructions: '1. Fermez les yeux et respirez calmement.\n2. Visualisez-vous dans une situation o√π vous r√©sistez avec succ√®s √† une craving.\n3. Imaginez en d√©tail : o√π vous √™tes, ce que vous ressentez, vos actions positives.\n4. Ressentez la fiert√© et la satisfaction de ce succ√®s.\n5. Ancrez cette image positive en r√©p√©tant une affirmation personnelle.',
      benefits: 'Renforce la confiance en soi, am√©liore la motivation, aide √† pr√©parer des strat√©gies de r√©sistance aux cravings'
    },
    {
      title: 'Marche Consciente',
      category: 'movement',
      difficulty: 'beginner',
      duration: 12,
      description: 'Exercice de marche en pleine conscience pour reconnecter corps et esprit.',
      instructions: '1. Choisissez un parcours calme de 10-15 m√®tres.\n2. Marchez tr√®s lentement en vous concentrant sur chaque pas.\n3. Ressentez le contact de vos pieds avec le sol.\n4. Observez votre environnement avec tous vos sens.\n5. Si une craving appara√Æt, notez-la sans jugement et continuez √† marcher.\n6. Faites des allers-retours pendant 12 minutes.',
      benefits: 'Am√©liore la pr√©sence corporelle, r√©duit l\'agitation mentale, offre une alternative saine aux comportements compulsifs'
    },
    {
      title: 'Technique STOP',
      category: 'coping',
      difficulty: 'beginner',
      duration: 2,
      description: 'Technique rapide pour faire face aux cravings intenses : Stop, Take a breath, Observe, Proceed.',
      instructions: '1. STOP : Arr√™tez-vous imm√©diatement quand vous ressentez une craving.\n2. TAKE A BREATH : Prenez 3 respirations profondes.\n3. OBSERVE : Observez vos sensations, √©motions et pens√©es sans jugement.\n4. PROCEED : Choisissez consciemment votre prochaine action positive.',
      benefits: 'Cr√©e un espace de pause entre la craving et l\'action, d√©veloppe la capacit√© de choix conscient, technique utilisable partout'
    }
  ];
  
  const createdExercises = [];
  
  for (const exercise of defaultExercises) {
    try {
      console.log(`üìù Cr√©ation: ${exercise.title}`);
      
      const createResponse = await apiRequest('POST', '/api/exercises', exercise);
      
      if (!createResponse.ok) {
        const errorText = await createResponse.text();
        console.error(`‚ùå Erreur pour ${exercise.title}:`, errorText);
        continue;
      }
      
      const result = await createResponse.json();
      createdExercises.push(result);
      console.log(`‚úÖ Cr√©√©: ${result.title} (ID: ${result.id})`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la cr√©ation de ${exercise.title}:`, error.message);
    }
  }
  
  return createdExercises;
}

// Fonction pour cr√©er du contenu psycho√©ducatif
async function createPsychoEducationContent() {
  console.log('\nüìö Cr√©ation du contenu psycho√©ducatif...');
  
  const psychoContent = [
    {
      title: 'Comprendre les Cravings',
      category: 'education',
      content: 'Les cravings sont des envies intenses et temporaires. Ils sont normaux et font partie du processus de gu√©rison. Comprendre leur nature temporaire aide √† mieux les g√©rer. La cl√© est d\'apprendre √† les observer sans y c√©der imm√©diatement.',
      tags: ['cravings', 'compr√©hension', '√©ducation']
    },
    {
      title: 'La Technique de l\'Urge Surfing',
      category: 'technique',
      content: 'L\'Urge Surfing consiste √† "surfer" sur la vague de la craving plut√¥t que de lutter contre elle. Visualisez votre craving comme une vague : elle monte, atteint un pic, puis redescend naturellement. En restant pr√©sent et en respirant calmement, vous pouvez "surfer" cette vague jusqu\'√† ce qu\'elle s\'apaise.',
      tags: ['technique', 'gestion', 'urge surfing']
    },
    {
      title: 'Identifier ses D√©clencheurs',
      category: 'identification',
      content: 'Les d√©clencheurs peuvent √™tre √©motionnels (stress, ennui, tristesse), environnementaux (lieux, personnes, situations) ou physiques (fatigue, faim). Tenir un journal de vos cravings aide √† identifier ces patterns et √† d√©velopper des strat√©gies sp√©cifiques pour chaque type de d√©clencheur.',
      tags: ['d√©clencheurs', 'identification', 'journal']
    }
  ];
  
  const createdContent = [];
  
  for (const content of psychoContent) {
    try {
      console.log(`üìñ Cr√©ation: ${content.title}`);
      
      const createResponse = await apiRequest('POST', '/api/psycho-education', content);
      
      if (!createResponse.ok) {
        const errorText = await createResponse.text();
        console.error(`‚ùå Erreur pour ${content.title}:`, errorText);
        continue;
      }
      
      const result = await createResponse.json();
      createdContent.push(result);
      console.log(`‚úÖ Cr√©√©: ${result.title}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la cr√©ation de ${content.title}:`, error.message);
    }
  }
  
  return createdContent;
}

// Fonction pour tester les endpoints de suivi
async function testTrackingEndpoints() {
  console.log('\nüß™ Test des endpoints de suivi...');
  
  const endpoints = [
    { path: '/api/exercises', needsAuth: true },
    { path: '/api/psycho-education', needsAuth: true },
    { path: '/api/dashboard/stats', needsAuth: true }
  ];
  
  for (const endpoint of endpoints) {
    try {
      console.log(`üì° Test: ${endpoint.path}`);
      
      const response = await apiRequest('GET', endpoint.path);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      const count = Array.isArray(data) ? data.length : (data && typeof data === 'object' ? Object.keys(data).length : 1);
      
      console.log(`‚úÖ ${endpoint.path}: OK (${count} √©l√©ments)`);
      
    } catch (error) {
      console.error(`‚ùå ${endpoint.path}: ERREUR - ${error.message}`);
    }
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Correction des probl√®mes de suivi\n');
  console.log(`üåê URL de base: ${BASE_URL}\n`);
  
  try {
    // Authentification admin
    const adminUser = await authenticateAdmin();
    
    // Cr√©er les exercices par d√©faut
    const exercises = await createDefaultExercises();
    console.log(`\n‚úÖ ${exercises.length} exercices cr√©√©s`);
    
    // Cr√©er le contenu psycho√©ducatif
    const psychoContent = await createPsychoEducationContent();
    console.log(`\n‚úÖ ${psychoContent.length} contenus psycho√©ducatifs cr√©√©s`);
    
    // Tester les endpoints
    await testTrackingEndpoints();
    
    console.log('\nüéØ CORRECTION TERMIN√âE');
    console.log('='.repeat(50));
    console.log('‚úÖ Exercices disponibles pour √©viter "Exercice introuvable"');
    console.log('‚úÖ Contenu psycho√©ducatif disponible');
    console.log('‚úÖ Endpoints test√©s et fonctionnels');
    console.log('\nüí° Prochaines √©tapes:');
    console.log('1. Red√©marrer l\'application si n√©cessaire');
    console.log('2. Tester manuellement la page de suivi');
    console.log('3. Cr√©er des donn√©es utilisateur pour voir les statistiques');
    
  } catch (error) {
    console.error('‚ùå √âCHEC de la correction:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Lancer le script
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { main as fixTrackingIssues };