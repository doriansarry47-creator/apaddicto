const axios = require('axios');

const BASE_URL = 'https://3000-ii7kjn56nxl1o3b8jakwm-5634da27.sandbox.novita.ai';
const ADMIN_EMAIL = 'doriansarry@yahoo.fr';
const ADMIN_PASSWORD = 'admin123';

class ApaddictoTesterFixed {
    constructor() {
        this.axiosInstance = axios.create({
            baseURL: BASE_URL,
            timeout: 10000,
            withCredentials: true,
            validateStatus: () => true
        });
        this.cookies = '';
        this.testResults = [];
    }

    log(message, status = 'info') {
        const timestamp = new Date().toISOString().slice(11, 19);
        const emoji = {
            'info': '‚ÑπÔ∏è',
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'test': 'üß™'
        }[status] || '‚ÑπÔ∏è';
        
        console.log(`[${timestamp}] ${emoji} ${message}`);
        this.testResults.push({ timestamp, status, message });
    }

    async testLogin() {
        this.log('Test de connexion admin', 'test');
        
        try {
            const response = await this.axiosInstance.post('/api/auth/login', {
                email: ADMIN_EMAIL,
                password: ADMIN_PASSWORD
            });

            if (response.status === 200) {
                this.log('Connexion admin r√©ussie', 'success');
                if (response.headers['set-cookie']) {
                    this.cookies = response.headers['set-cookie'].join('; ');
                    this.axiosInstance.defaults.headers.Cookie = this.cookies;
                }
                return { success: true, user: response.data };
            } else {
                this.log(`√âchec de connexion: ${response.status}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur lors de la connexion: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async testEducationalContentCreation() {
        this.log('Test de cr√©ation de contenu √©ducatif (structure corrig√©e)', 'test');
        
        // D'abord r√©cup√©rer une cat√©gorie valide
        const categoriesResponse = await this.axiosInstance.get('/api/content-categories');
        if (categoriesResponse.status !== 200) {
            this.log('Impossible de r√©cup√©rer les cat√©gories', 'error');
            return { success: false };
        }
        
        const categories = categoriesResponse.data;
        const categoryId = categories[0]?.id;
        
        if (!categoryId) {
            this.log('Aucune cat√©gorie disponible', 'error');
            return { success: false };
        }

        const testContent = {
            title: 'Test - Guide Complet de Gestion du Stress',
            description: 'Un guide d√©taill√© pour apprendre √† g√©rer le stress efficacement',
            type: 'text', // Types valides: 'text', 'video', 'audio', 'pdf', 'image'
            categoryId: categoryId, // Utiliser categoryId, pas category
            content: `
# Guide Complet de Gestion du Stress

## Introduction
Le stress fait partie de notre vie quotidienne mais peut √™tre g√©r√© efficacement.

## Techniques pratiques
1. **Respiration contr√¥l√©e** : 4-7-8 (inspire 4s, retient 7s, expire 8s)
2. **Relaxation progressive** : Contractez puis rel√¢chez chaque muscle
3. **M√©ditation de pleine conscience** : 10 minutes par jour minimum
4. **Activit√© physique r√©guli√®re** : 30 minutes, 3 fois par semaine

## Gestion √©motionnelle
- Identifiez vos d√©clencheurs de stress
- D√©veloppez votre intelligence √©motionnelle
- Pratiquez l'auto-compassion

## Conclusion
La gestion du stress s'am√©liore avec la pratique constante et la patience.
            `,
            difficulty: 'easy', // 'easy', 'intermediate', 'advanced'
            estimatedReadTime: 8,
            tags: ['stress', 'bien-√™tre', 'relaxation', 'sant√© mentale', 'techniques'],
            status: 'published' // 'draft', 'published', 'archived'
        };

        try {
            const response = await this.axiosInstance.post('/api/educational-contents', testContent);
            
            if (response.status === 201 || response.status === 200) {
                this.log('Cr√©ation de contenu √©ducatif r√©ussie', 'success');
                this.log(`ID du contenu: ${response.data.id}`, 'info');
                return { success: true, contentId: response.data?.id };
            } else {
                this.log(`√âchec cr√©ation contenu: ${response.status} - ${JSON.stringify(response.data)}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur cr√©ation contenu: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async testSessionCreation() {
        this.log('Test de cr√©ation de s√©ance protocolis√©e (structure corrig√©e)', 'test');
        
        // D'abord r√©cup√©rer un exercice valide
        const exercisesResponse = await this.axiosInstance.get('/api/exercises');
        if (exercisesResponse.status !== 200) {
            this.log('Impossible de r√©cup√©rer les exercices', 'error');
            return { success: false };
        }
        
        const exercises = exercisesResponse.data;
        if (exercises.length === 0) {
            this.log('Aucun exercice disponible', 'error');
            return { success: false };
        }

        const testSession = {
            title: 'S√©ance Compl√®te - Cardio Adapt√©',
            description: 'S√©ance de cardio adapt√© pour d√©butants avec progression graduelle',
            category: 'cardio',
            protocol: 'standard',
            exercises: [
                {
                    exerciseId: exercises[0].id, // Utiliser un ID valide
                    duration: 600, // 10 minutes
                    repetitions: 1,
                    sets: 1,
                    restTime: 120, // 2 minutes de repos
                    notes: 'Commencer doucement et augmenter l\'intensit√© progressivement'
                },
                {
                    exerciseId: exercises[1]?.id || exercises[0].id, // Deuxi√®me exercice ou fallback
                    duration: 300, // 5 minutes
                    repetitions: 2,
                    sets: 1,
                    restTime: 60,
                    notes: 'Maintenir un rythme r√©gulier'
                }
            ],
            totalDuration: 20, // 20 minutes au total
            difficulty: 'beginner',
            tags: ['cardio', 'd√©butant', 'adapt√©', 'progression'],
            isPublic: true,
            status: 'published'
        };

        try {
            const response = await this.axiosInstance.post('/api/sessions', testSession);
            
            if (response.status === 201 || response.status === 200) {
                this.log('Cr√©ation de s√©ance protocolis√©e r√©ussie', 'success');
                this.log(`ID de la s√©ance: ${response.data.id}`, 'info');
                return { success: true, sessionId: response.data?.id };
            } else {
                this.log(`√âchec cr√©ation s√©ance: ${response.status} - ${JSON.stringify(response.data)}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur cr√©ation s√©ance: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async testEmergencyRoutineCreation() {
        this.log('Test de cr√©ation de routine d\'urgence (structure corrig√©e)', 'test');
        
        const testRoutine = {
            title: 'Routine Compl√®te Anti-Stress d\'Urgence',
            description: 'Technique rapide et efficace pour g√©rer les situations de crise de stress aigu',
            steps: [
                'Trouvez un endroit calme et asseyez-vous confortablement',
                'Fermez les yeux et prenez conscience de votre respiration',
                'Inspirez lentement par le nez pendant 4 secondes',
                'Retenez votre souffle pendant 4 secondes',
                'Expirez lentement par la bouche pendant 6 secondes',
                'R√©p√©tez ce cycle respiratoire 8 fois de suite',
                'Focalisez-vous sur 5 choses que vous pouvez voir',
                'Identifiez 4 choses que vous pouvez toucher',
                '√âcoutez 3 sons diff√©rents autour de vous',
                'Sentez 2 odeurs distinctes',
                'Go√ªtez 1 saveur dans votre bouche',
                'Prenez 3 respirations profondes pour terminer',
                '√âvaluez votre niveau de stress sur une √©chelle de 1 √† 10'
            ],
            duration: 8, // 8 minutes - dur√©e en MINUTES selon le sch√©ma
            category: 'breathing', // 'breathing', 'grounding', 'distraction', 'general'
            isActive: true,
            isDefault: false
        };

        try {
            const response = await this.axiosInstance.post('/api/emergency-routines', testRoutine);
            
            if (response.status === 201 || response.status === 200) {
                this.log('Cr√©ation de routine d\'urgence r√©ussie', 'success');
                this.log(`ID de la routine: ${response.data.id}`, 'info');
                this.log(`Nombre d'√©tapes: ${response.data.steps?.length || 0}`, 'info');
                return { success: true, routineId: response.data?.id };
            } else {
                this.log(`√âchec cr√©ation routine: ${response.status} - ${JSON.stringify(response.data)}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur cr√©ation routine: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async testAdminDashboard() {
        this.log('Test d\'acc√®s au tableau de bord admin', 'test');
        
        try {
            const response = await this.axiosInstance.get('/api/admin/dashboard');
            
            if (response.status === 200) {
                this.log('Acc√®s au tableau de bord admin r√©ussi', 'success');
                const data = response.data;
                this.log(`üìä Statistiques: ${data.totalPatients} patients, ${data.totalSessions} s√©ances, ${data.totalExercises} exercices`, 'info');
                return { success: true, data: response.data };
            } else {
                this.log(`√âchec acc√®s dashboard: ${response.status}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur acc√®s dashboard: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async testPatientsList() {
        this.log('Test d\'acc√®s √† la liste des patients', 'test');
        
        try {
            const response = await this.axiosInstance.get('/api/admin/patients');
            
            if (response.status === 200) {
                this.log(`Liste des patients r√©cup√©r√©e: ${response.data?.length || 0} patients`, 'success');
                return { success: true, patients: response.data };
            } else {
                this.log(`√âchec acc√®s patients: ${response.status}`, 'error');
                return { success: false, error: response.data };
            }
        } catch (error) {
            this.log(`Erreur acc√®s patients: ${error.message}`, 'error');
            return { success: false, error: error.message };
        }
    }

    async runCompleteTest() {
        this.log('üöÄ D√©marrage du test complet corrig√© d\'Apaddicto', 'info');
        
        // 1. Test de connexion
        const loginResult = await this.testLogin();
        if (!loginResult.success) {
            this.log('Test arr√™t√© - √©chec de connexion', 'error');
            return this.generateReport();
        }

        // 2. Test du tableau de bord admin
        await this.testAdminDashboard();

        // 3. Test de la liste des patients
        await this.testPatientsList();

        // 4. Test de cr√©ation de contenu √©ducatif (corrig√©)
        await this.testEducationalContentCreation();

        // 5. Test de cr√©ation de s√©ance protocolis√©e (corrig√©)
        await this.testSessionCreation();

        // 6. Test de cr√©ation de routine d'urgence (corrig√©)
        await this.testEmergencyRoutineCreation();

        this.log('üèÅ Test complet termin√©', 'info');
        return this.generateReport();
    }

    generateReport() {
        const successCount = this.testResults.filter(r => r.status === 'success').length;
        const errorCount = this.testResults.filter(r => r.status === 'error').length;
        const totalTests = this.testResults.filter(r => r.status === 'test').length;

        console.log('\\n' + '='.repeat(60));
        console.log('üìä RAPPORT DE TEST APADDICTO (CORRIG√â)');
        console.log('='.repeat(60));
        console.log(`üß™ Tests ex√©cut√©s: ${totalTests}`);
        console.log(`‚úÖ Succ√®s: ${successCount}`);
        console.log(`‚ùå √âchecs: ${errorCount}`);
        console.log(`üìà Taux de r√©ussite: ${Math.round((successCount / totalTests) * 100)}%`);
        console.log('='.repeat(60));

        return {
            totalTests,
            successCount,
            errorCount,
            successRate: Math.round((successCount / totalTests) * 100),
            results: this.testResults
        };
    }
}

// Ex√©cuter le test si appel√© directement
if (require.main === module) {
    const tester = new ApaddictoTesterFixed();
    tester.runCompleteTest();
}

module.exports = ApaddictoTesterFixed;