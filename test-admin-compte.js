#!/usr/bin/env node
/**
 * Script de test pour le compte admin doriansarry@yahoo.fr
 */

const BASE_URL = 'http://localhost:3000';

async function testAdminAccount() {
  console.log('üîç Test du compte admin: doriansarry@yahoo.fr\n');

  try {
    // 1. Test de connexion
    console.log('1Ô∏è‚É£  Test de connexion...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'doriansarry@yahoo.fr',
        password: 'admin123'
      })
    });

    if (!loginResponse.ok) {
      console.error('‚ùå √âchec de connexion:', await loginResponse.text());
      return;
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ Connexion r√©ussie!');
    console.log('   - Utilisateur:', loginData.user.email);
    console.log('   - R√¥le:', loginData.user.role);
    console.log('   - ID:', loginData.user.id);

    // R√©cup√©rer les cookies de session
    const cookies = loginResponse.headers.get('set-cookie');
    
    // 2. Test de r√©cup√©ration des exercices
    console.log('\n2Ô∏è‚É£  Test de r√©cup√©ration des exercices...');
    const exercisesResponse = await fetch(`${BASE_URL}/api/exercises`, {
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (!exercisesResponse.ok) {
      console.error('‚ùå √âchec r√©cup√©ration exercices');
    } else {
      const exercises = await exercisesResponse.json();
      console.log(`‚úÖ ${exercises.length} exercices r√©cup√©r√©s`);
    }

    // 3. Test de r√©cup√©ration des s√©ances
    console.log('\n3Ô∏è‚É£  Test de r√©cup√©ration des s√©ances...');
    const sessionsResponse = await fetch(`${BASE_URL}/api/sessions`, {
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (!sessionsResponse.ok) {
      const errorText = await sessionsResponse.text();
      console.error('‚ùå √âchec r√©cup√©ration s√©ances:', sessionsResponse.status, errorText);
    } else {
      const sessions = await sessionsResponse.json();
      console.log(`‚úÖ ${sessions.length} s√©ances r√©cup√©r√©es`);
      if (sessions.length > 0) {
        console.log('   S√©ances:');
        sessions.forEach(session => {
          console.log(`   - ${session.title} (${session.category}, ${session.status})`);
        });
      }
    }

    // 4. Test de r√©cup√©ration des patients
    console.log('\n4Ô∏è‚É£  Test de r√©cup√©ration des patients...');
    const patientsResponse = await fetch(`${BASE_URL}/api/admin/patients`, {
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (!patientsResponse.ok) {
      const errorText = await patientsResponse.text();
      console.error('‚ùå √âchec r√©cup√©ration patients:', patientsResponse.status, errorText);
    } else {
      const patients = await patientsResponse.json();
      console.log(`‚úÖ ${patients.length} patients r√©cup√©r√©s`);
      if (patients.length > 0) {
        console.log('   Patients:');
        patients.forEach(patient => {
          console.log(`   - ${patient.firstName} ${patient.lastName} (${patient.email})`);
        });
      }
    }

    // 5. Test de r√©cup√©ration du contenu √©ducatif
    console.log('\n5Ô∏è‚É£  Test de r√©cup√©ration du contenu √©ducatif...');
    const contentResponse = await fetch(`${BASE_URL}/api/educational-contents`, {
      headers: {
        'Cookie': cookies || ''
      }
    });

    if (!contentResponse.ok) {
      console.error('‚ùå √âchec r√©cup√©ration contenu √©ducatif');
    } else {
      const contents = await contentResponse.json();
      console.log(`‚úÖ ${contents.length} contenus √©ducatifs r√©cup√©r√©s`);
    }

    console.log('\n‚ú® Tests termin√©s avec succ√®s!\n');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testAdminAccount();
